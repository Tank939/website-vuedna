.grid {
  // Flex grid
  display: flex;

  // Wrap columns only if content cannot fit
  flex-wrap: wrap;

  // Alignment for all cells
  &.align-top {
    align-items: flex-start;
  }
  &.align-middle {
    align-items: center;
  }
  &.align-bottom {
    align-items: flex-end;
  }

  // Horizontal alignment
  &.align-center {
    justify-content: center;
  }
  &.align-right {
    justify-content: flex-end;
  }

  // Gutters (and bottom margin so stacked grids space with gutters on bottom)
  // NOTE: This value must match column padding gutter value
  margin: -#{$grid-gutter} 0 #{$grid-gutter} -#{$grid-gutter};

  @include media($breakpoint-below-laptop) {
    margin: -#{$grid-gutter-small} 0 #{$grid-gutter-small} -#{$grid-gutter-small};
  }

  &.no-gutter {
    margin: 0;

    > .col {
      padding: 0;
    }
  }

  &.wrap > .col {
    overflow: initial;
  }

  &:not(.no-grow) > .col,
  > .col.fill {
    // Default to all columns split equal width
    flex: 1;
  }

  > .col {
    // Hide content that overflows by default
    // (so columns don't wrap to new lines)
    overflow: hidden;

    // Gutters
    padding: #{$grid-gutter} 0 0 #{$grid-gutter};

    @include media($breakpoint-below-laptop) {
      padding: #{$grid-gutter-small} 0 0 #{$grid-gutter-small};
    }

    // Alignment per cell
    &.align-top {
      align-self: flex-start;
    }
    &.align-middle {
      align-self: center;
    }
    &.align-bottom {
      align-self: flex-end;
    }
  }

  // If we want to force columns to always stay on same line if content cannot fit
  &.no-wrap > .col {
    overflow: hidden;
  }
}

// Some set width sizes for simplicity
@mixin grid-rows($prefix: "r") {
  .grid.#{$prefix}1 > .col {
    flex: 0 0 100%;
  }
  .grid.#{$prefix}2 > .col {
    flex: 0 0 50%;
  }
  .grid.#{$prefix}3 > .col {
    flex: 0 0 calc(100% / 3);
  }
  .grid.#{$prefix}4 > .col {
    flex: 0 0 25%;
  }
  .grid.#{$prefix}5 > .col {
    flex: 0 0 20%;
  }
  .grid.#{$prefix}6 > .col {
    flex: 0 0 calc(100% / 6);
  }
  .grid.#{$prefix}7 > .col {
    flex: 0 0 calc(100% / 7);
  }
  .grid.#{$prefix}8 > .col {
    flex: 0 0 12.5%;
  }
  .grid.#{$prefix}9 > .col {
    flex: 0 0 calc(100% / 9);
  }
  .grid.#{$prefix}10 > .col {
    flex: 0 0 10%;
  }
  .grid.#{$prefix}11 > .col {
    flex: 0 0 calc(100% / 11);
  }
  .grid.#{$prefix}12 > .col {
    flex: 0 0 calc(100% / 12);
  }
}

// Some set width sizes for simplicity
@mixin grid-widths($prefix: "w") {
  .grid > .col.#{$prefix}100 {
    flex: 0 0 100%;
  }
  .grid > .col.#{$prefix}90 {
    flex: 0 0 90%;
  }
  .grid > .col.#{$prefix}80 {
    flex: 0 0 80%;
  }
  .grid > .col.#{$prefix}75 {
    flex: 0 0 75%;
  }
  .grid > .col.#{$prefix}70 {
    flex: 0 0 70%;
  }
  .grid > .col.#{$prefix}66 {
    flex: 0 0 66%;
  }
  .grid > .col.#{$prefix}60 {
    flex: 0 0 60%;
  }
  .grid > .col.#{$prefix}50 {
    flex: 0 0 50%;
  }
  .grid > .col.#{$prefix}40 {
    flex: 0 0 40%;
  }
  .grid > .col.#{$prefix}33 {
    flex: 0 0 33%;
  }
  .grid > .col.#{$prefix}30 {
    flex: 0 0 30%;
  }
  .grid > .col.#{$prefix}25 {
    flex: 0 0 25%;
  }
  .grid > .col.#{$prefix}20 {
    flex: 0 0 20%;
  }
  .grid > .col.#{$prefix}10 {
    flex: 0 0 10%;
  }
}

// Include non-responsive grid widths
@include grid-rows();
@include grid-widths();

// For each breakpoint...
@each $breakpoint in $breakpoints {
  // Get name of each breakpoint
  $name: nth($breakpoint, 1);

  // Add media query wrapper for each breakpoint
  @include media($name) {
    @include grid-widths("#{$name}-");
    @include grid-rows("#{$name}-");
  }
}

// Demo column styles
.demo {
  .col:not(.no-demo) > div {
    border: 1px dashed $color2;
    text-align: center;
    padding: 1em;
    display: block;
  }
}
